diff --git a/Makefile b/Makefile
index f9637b7..c959525 100644
--- a/Makefile
+++ b/Makefile
@@ -1,12 +1,12 @@
-CFLAGS?=-O2 -g -Wall -W $(shell pkg-config --cflags librtlsdr)
-LDLIBS+=$(shell pkg-config --libs librtlsdr) -lpthread -lm
-CC?=gcc
+CFLAGS?=-O2 -Wall -W
+LDLIBS+=-lpthread -lm
+
 PROGNAME=dump1090
 
 all: dump1090
 
 %.o: %.c
-	$(CC) $(CFLAGS) -c $<
+	$(CC) $(CFLAGS) -DDISABLE_RTLSDR=1 -c $<
 
 dump1090: dump1090.o anet.o
 	$(CC) -g -o dump1090 dump1090.o anet.o $(LDFLAGS) $(LDLIBS)
diff --git a/dump1090.c b/dump1090.c
index ed9b2bf..b01e5f5 100644
--- a/dump1090.c
+++ b/dump1090.c
@@ -28,6 +28,7 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#include <assert.h>
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
@@ -43,7 +44,12 @@
 #include <sys/stat.h>
 #include <sys/ioctl.h>
 #include <sys/select.h>
+#include <poll.h>
+
+#ifndef DISABLE_RTLSDR
 #include "rtl-sdr.h"
+#endif
+
 #include "anet.h"
 
 #define MODES_DEFAULT_RATE         2000000
@@ -141,7 +147,9 @@ struct {
     int dev_index;
     int gain;
     int enable_agc;
+#ifndef DISABLE_RTLSDR
     rtlsdr_dev_t *dev;
+#endif
     int freq;
 
     /* Networking */
@@ -169,6 +177,7 @@ struct {
     int onlyaddr;                   /* Print only ICAO addresses. */
     int metric;                     /* Use metric units. */
     int aggressive;                 /* Aggressive detection algorithm. */
+    int winglet_dsp;                /* Winglet DSP Mode for use on AV Badge */
 
     /* Interactive mode */
     struct aircraft *aircrafts;
@@ -337,6 +346,7 @@ void modesInit(void) {
     Modes.exit = 0;
 }
 
+#ifndef DISABLE_RTLSDR
 /* =============================== RTLSDR handling ========================== */
 
 void modesInitRTLSDR(void) {
@@ -412,6 +422,7 @@ void rtlsdrCallback(unsigned char *buf, uint32_t len, void *ctx) {
     pthread_cond_signal(&Modes.data_cond);
     pthread_mutex_unlock(&Modes.data_mutex);
 }
+#endif
 
 /* This is used when --ifile is specified in order to read data from file
  * instead of using an RTLSDR device. */
@@ -475,9 +486,14 @@ void *readerThreadEntryPoint(void *arg) {
     MODES_NOTUSED(arg);
 
     if (Modes.filename == NULL) {
+#ifndef DISABLE_RTLSDR
         rtlsdr_read_async(Modes.dev, rtlsdrCallback, NULL,
                               MODES_ASYNC_BUF_NUMBER,
                               MODES_DATA_LEN);
+#else
+        printf("RTL SDR support disabled!\n");
+        exit(1);
+#endif
     } else {
         readDataFromFile();
     }
@@ -2468,6 +2484,7 @@ void showHelp(void) {
 "--metric                 Use metric units (meters, km/h, ...).\n"
 "--snip <level>           Strip IQ file removing samples < level.\n"
 "--debug <flags>          Debug mode (verbose), see README for details.\n"
+"--winglet-dsp            Runs in winglet dsp mode (ifile defaults to /dev/adsb0).\n"
 "--help                   Show this help.\n"
 "\n"
 "Debug mode flags: d = Log frames decoded with errors\n"
@@ -2574,6 +2591,11 @@ int main(int argc, char **argv) {
             }
         } else if (!strcmp(argv[j],"--stats")) {
             Modes.stats = 1;
+        } else if (!strcmp(argv[j],"--winglet-dsp")) {
+            Modes.winglet_dsp = 1;
+            if (!Modes.filename) {
+                Modes.filename = "/dev/adsb0";
+            }
         } else if (!strcmp(argv[j],"--snip") && more) {
             snipMode(atoi(argv[++j]));
             exit(0);
@@ -2597,7 +2619,12 @@ int main(int argc, char **argv) {
     if (Modes.net_only) {
         fprintf(stderr,"Net-only mode, no RTL device or file open.\n");
     } else if (Modes.filename == NULL) {
+#ifndef DISABLE_RTLSDR
         modesInitRTLSDR();
+#else
+        printf("RTL SDR support disabled!\n");
+        exit(1);
+#endif
     } else {
         if (Modes.filename[0] == '-' && Modes.filename[1] == '\0') {
             Modes.fd = STDIN_FILENO;
@@ -2615,6 +2642,44 @@ int main(int argc, char **argv) {
         modesWaitReadableClients(100);
     }
 
+    while (Modes.winglet_dsp) {
+        struct modesMessage mm;
+        unsigned char msg[MODES_LONG_MSG_BYTES];
+        struct pollfd pfd = {.fd = Modes.fd, .events = POLLIN};
+
+        // Wait up to 50ms for a message to arrive
+        int ret;
+        int timeout = 50;
+        do {
+            ret = poll(&pfd, 1, timeout);
+            timeout = 0;  // After next loops, don't delay, just report if data pending
+            if (ret < 0) {
+                perror("poll");
+                exit(1);
+            }
+
+            if (ret > 0 && pfd.revents & POLLIN) {
+                ssize_t len = read(Modes.fd, msg, MODES_LONG_MSG_BYTES);
+                if (len < 0) {
+                    perror("read");
+                    exit(1);
+                }
+                else if (len == 0) {
+                    printf("EOF\n");
+                    exit(0);
+                }
+                if (len < MODES_LONG_MSG_BYTES) {
+                    memset(msg+len, 0, MODES_LONG_MSG_BYTES-len);
+                }
+                decodeModesMessage(&mm,msg);
+                useModesMessage(&mm);
+            }
+        } while (ret != 0);
+
+        backgroundTasks();
+        modesWaitReadableClients(1);
+    }
+
     /* Create the thread that will read the data from the device. */
     pthread_create(&Modes.reader_thread, NULL, readerThreadEntryPoint, NULL);
 
@@ -2658,7 +2723,9 @@ int main(int argc, char **argv) {
             Modes.stat_goodcrc + Modes.stat_fixed);
     }
 
+#ifndef DISABLE_RTLSDR
     rtlsdr_close(Modes.dev);
+#endif
     return 0;
 }
 
