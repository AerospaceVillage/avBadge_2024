#include "mainwindow.h"
#include "ui_mainwindow.h"

#include "AVQtWidgets/qrotarymenuentry.h"
#include <QLabel>
#include "AVQtWidgets/qcircularkeyboard.h"
#include "AVQtWidgets/RotaryMenuEntries/qtestmenuentry.h"

#include "AVQtWidgets/qrotarymenu.h"
#include "AVQtWidgets/clock.h"
#include "AVQtWidgets/simplemediaplayer.h"
#include "AVQtWidgets/splash.h"
#include "AVQtWidgets/compass.h"
#include "AVQtWidgets/getdata.h"
#include "AVQtWidgets/radarscope.h"
#include "AVQtWidgets/flightboard.h"
#include "AVQtWidgets/oscope.h"
#include "AVQtWidgets/RotaryMenuEntries/qclockmenuentry.h"
#include "AVQtWidgets/RotaryMenuEntries/qcompassmenuentry.h"
#include "AVQtWidgets/RotaryMenuEntries/qoscopemenuentry.h"
#include "AVQtWidgets/RotaryMenuEntries/qsplashmenuentry.h"
#include "AVQtWidgets/RotaryMenuEntries/qflightboardmenuentry.h"
#include "AVQtWidgets/RotaryMenuEntries/qradarscopemenuentry.h"
#include "AVQtWidgets/RotaryMenuEntries/qmediaplayermenuentry.h"


QWidget* primary_control;

MainWindow::MainWindow(QWidget* parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    setMinimumSize(480,480);
    // setAttribute(Qt::WA_TranslucentBackground);

    ui->setupUi(this);
//    getData* getdata = new getData(this);
//    getdata->start();

    // Clock* clockW = new Clock(this);
    // compass* compassW = new compass(this);
    // simplemediaplayer* mediaPlayer = new simplemediaplayer();
    // splash* splashScreen = new splash();
    // radarscope* radar = new radarscope();

    // connect(radar, SIGNAL(callData()),getdata, SLOT(onReqAirSpace()));
    // connect(getdata, SIGNAL(givePlane(QList<aircraft>)),radar, SLOT(setTraffic(QList<aircraft>)));
    // connect(radar, SIGNAL(setPixToMiles(float)),getdata, SLOT(setPtoM(float)));
    // connect(radar, SIGNAL(getGPS()),getdata, SLOT(giveGPS()));
    // connect(getdata, SIGNAL(updateGPS(gpsCord)),radar, SLOT(scopeGPS(gpsCord)));
    // QList<QChar> characters = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
    //
    // QCircularKeyboard* circular_keyboard = new QCircularKeyboard(characters, this);
    // primary_control = circular_keyboard;
    // this->installEventFilter(circular_keyboard);


    // Create a menu entry instance. It should know it's parent (in this case the main menu) and the display for the entry.
    QClockMenuEntry* clock_entry = new QClockMenuEntry(this, "Clock");
    QCompassMenuEntry* compass_entry = new QCompassMenuEntry(this, "Compass");
    QOscopeMenuEntry* oScope_entry = new QOscopeMenuEntry(this, "OScope");
    QSplashMenuEntry* splash_entry = new QSplashMenuEntry(this, "Image");
    QFlightBoardMenuEntry* flightBoard_entry = new QFlightBoardMenuEntry(this, "Fight Board");
    QRadarScopeMenuEntry* radarscope_entry = new QRadarScopeMenuEntry(this, "Radar Scope");
    QMediaPlayerMenuEntry* mediaplayer_entry = new QMediaPlayerMenuEntry(this, "Media Player");
    // QRotaryMenu expects this list of the entries, this way is done just for organization.
    QList<QRotaryMenuEntry*> rotary_menu_entries;
    rotary_menu_entries.append(clock_entry);
    rotary_menu_entries.append(compass_entry);
    rotary_menu_entries.append(oScope_entry);
    rotary_menu_entries.append(splash_entry);
    rotary_menu_entries.append(flightBoard_entry);
    rotary_menu_entries.append(radarscope_entry);
    rotary_menu_entries.append(mediaplayer_entry);


    QRotaryMenu* rotary_menu = new QRotaryMenu(
        rotary_menu_entries,
        this,
        50,
        60
        );
    this->main_rotary_menu = rotary_menu;
    // primary_control is used to determine if a GUI should action on the key_presses it gets.
    // GUIs may or may not remain in memory when closed and there may be some necessary global key presses.
    // This allows for those cases as long as the GUIs implement and use this scheme. Example in QRotaryMenu eventFilter.
    primary_control = rotary_menu;
    // Forward event signals to the rotary_menu that are caught by the main window.
    this->installEventFilter(rotary_menu);

    // The rotary menu instance is actually what needs to be given control back to, not the main menu.
    // Using this scheme we just tell the new widget where to return control to if it needs controls, or if not just to tell the rotary menu it's expected to handle it instead.
    clock_entry->set_return_to(rotary_menu);
    compass_entry->set_return_to(rotary_menu);

    // labels.append(ui->labelOption1); // Example for referencing a label generated by .ui.

}

MainWindow::~MainWindow() {
    delete ui;
}

void MainWindow::set_active_controlled_widget(QWidget *widget) {
    this->main_rotary_menu->set_active_controlled_widget(widget);
}
